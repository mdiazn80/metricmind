services:

  traefik:
    image: traefik:${TRAEFIK_VERSION}
    hostname: traefik
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: bind
        source: ./traefik/traefik.yml
        target: /etc/traefik/traefik.yml
        read_only: true
      - type: bind
        source: ./traefik/dynamic
        target: /etc/traefik/dynamic
        read_only: true
      - type: bind
        source: ./traefik/certs
        target: /certs
        read_only: true
    networks:
      - metricmind-network

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    hostname: grafana
    container_name: grafana
    restart: unless-stopped
    # ports:
    #  - '3000:3000'
    volumes:
      - type: volume
        source: volume-metricmind-grafana
        target: /var/lib/grafana
      - type: bind
        source: ./grafana/grafana.ini
        target: /etc/grafana/grafana.ini
      - type: bind
        source: ./grafana/dashboards
        target: /etc/grafana/provisioning/dashboards
      - type: bind
        source: ./grafana/datasources
        target: /etc/grafana/provisioning/datasources
    networks:
      - metricmind-network

  alertmanager:
    image: prom/alertmanager:${ALERTMANAGER_VERSION}
    hostname: alertmanager
    container_name: alertmanager
    restart: unless-stopped
    # ports:
    #   - "9093:9093"
    volumes:
      - type: bind
        source: ./alertmanager/alertmanager.yml
        target: /etc/alertmanager/alertmanager.yml
        read_only: true
      - type: volume
        source: volume-metricmind-alertmanager
        target: /alertmanager
    networks:
      - metricmind-network

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    hostname: prometheus
    container_name: prometheus
    # ports:
    #   - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-remote-write-receiver"
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
      - type: volume
        source: volume-metricmind-prometheus
        target: /prometheus
    networks:
      - metricmind-network

  loki:
    image: grafana/loki:${LOKI_VERSION}
    hostname: loki
    container_name: loki
    command: "-config.file=/etc/loki/config.yaml -target=all"
    # ports:
    #   - 3100:3100
    #   - 7946
    #   - 9095
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./loki/config.yaml
        target: /etc/loki/config.yaml
        read_only: true
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - metricmind-network

  minio:
    image: minio/minio:${MINIO_VERSION}
    hostname: minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    # ports:
    #   - "9000:9000"
    #   - "9001:9001"
    command: server /data --console-address ":9001"
    restart: unless-stopped
    volumes:
      - type: volume
        source: volume-metricmind-minio
        target: /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - metricmind-network

  mc-init:
    image: minio/mc:${MINIO_MC_VERSION}
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DEFAULT_BUCKET: ${MINIO_DEFAULT_BUCKET}
      MINIO_DEFAULT_BUCKET_POLICY: ${MINIO_DEFAULT_BUCKET_POLICY}
    entrypoint: >
      sh -c "
        mc alias set metricmindminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
        mc mb --ignore-existing metricmindminio/${MINIO_DEFAULT_BUCKET} &&
        if [ \"${MINIO_DEFAULT_BUCKET_POLICY}\" = \"public\" ]; then
          mc anonymous set download metricmindminio/${MINIO_DEFAULT_BUCKET};
        elif [ \"${MINIO_DEFAULT_BUCKET_POLICY}\" = \"private\" ]; then
          mc anonymous set none metricmindminio/${MINIO_DEFAULT_BUCKET};
        fi
      "
    restart: "no"
    networks:
      - metricmind-network

volumes:
  volume-metricmind-grafana:
  volume-metricmind-alertmanager:
  volume-metricmind-prometheus:
  volume-metricmind-alloy:
  volume-metricmind-minio:

networks:
  metricmind-network:
    driver: bridge
